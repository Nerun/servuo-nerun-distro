               +-----------------------------------+
               | PREMIUM SPAWNER - Tutorial básico |
               +-----------------------------------+

                                               ------------------------
                                               Última revisão: Fev/2014
                                               ------------------------

	Premium Spawner nasceu como um "mod" do script Ultimate Spawner,
criado por um Scripter brasileiro chamado Atomic, que possuia um Shard
chamado AtomicShard. Ele se baseia num script que lê as informações dos
spawns num "mapa" e então os gera no mundo. O script original foi
modificado por Nerun (eu mesmo) e quando o número de  modificações ao
script original se tornou grande, mudei o nome da minha versão. O
Premium Spawner é o sucessor do Ultimate Spawner v4.0 R5 (até então, a
simples adição do R, seguido por um número diferenciava a minha versão
do script original concebido por Atomic). As diferenças fundamentais
são:

 - O "Premium" possui novas propriedades:
	1. SpawnID - ID de spawners, usado para remover spawns
	2. OverrideMap - sobrescreve todas as informações da facet na qual
		o spawner vai aparecer
	3. OverrideID - funciona como OverrideMap, mas para SpawnID
	4. OverrideMinTime - funciona como OverrideMap, mas para MinDelay
	5. OverrideMaxTime - funciona como OverrideMap, mas para MaxDelay

 - O "Premium" possui uma engine própria, não utilizando mais o spawner
   padrão que vem com o RunUO, ele utiliza ao invés, o "PremiumSpawner".
   Você pode usar ambos os sistemas simultaneamente.

  - "Premium" possui arquivos de mapa (Ultimate não tinha).

  - "Premium" é amigável e fácil de usar.

	O básico do básico que é preciso saber, é que este Sistema de
spawner é útil para se manter "salvo" em um arquivo (o mapa) os spawners
que você criou até agora. Supomos que você tenha de apagar tudo e
recomeçar o mundo do zero. Terá de colocar mais de dez mil spawns denovo?!
NÃO! Apenas usa um comando e pronto, tudo gerado denovo, e sem esforço,
que se dá apenas no processo de criação do mapa.
	O sistema atual é considerado bastante maduro (do ponto de vista da
estabilidade, recursos e facilidade de uso) e completo (do ponto de vista
do povoamento do mundo).


ÍNDICE:
	1. INSTALANDO O PREMIUM SPAWNER
	2. PARTE I - O Menu Principal
	3. PARTE II - Criando um Mapa (Básico)
	4. PARTE III - Usando os Mapas "In-Game" (Básico)
	5. PARTE IV - Criando um Mapa (Avançado)
	6. PARTE V - Usando os Mapas "In-Game" (Avançado)
	7. PARTE VI - Opções de Edição
	8. PARTE VII - Spawns' Overseer


>>>>>>>>>>>>>>>>>>>>>>>>>>>>
INSTALANDO O PREMIUM SPAWNER
<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	O sistema de criação de spawners, Premium Spawner, é composto por
uma coleção de scripts. Como já somam muitos scripts, não irei
enumerá-los aqui. Atualmente este sistema de spawner é distribuído num
pacote chamado "Nerun's Distro". Eram diversos pacotes no começo, mas
para facilidade eu os agrupei numa única distribuição. Este pacote também
inclui outros recursos, como mapas de spawns para serem usados com esse
sistema. Assim como gumps (menus) fáceis de usar para facilitar ainda
mais o povoamento do seu mundo. Esta distro pode ser encontrada no forum
do RunUO: http://www.runuo.com/.

Para instalar a distro abra o arquivo READ-ME FIRST.txt e siga as
instruções.


>>>>>>>>>>>>>>>>>>>>>>>>>>
PARTE I - O Menu Principal
<<<<<<<<<<<<<<<<<<<<<<<<<<

	Você pode acessar o menu principal do sistema digitando [spawner.
Há muitas opções no menu, com duas páginas. As opções costumam ser auto-
explicativas e/ou conter dicas. Mas vou listá-las aqui:


USO ATRAVÉS DO MENU                        LINHA DE COMANDO
===========================================================
WORLD CREATION:
	Let there be light (Create world) -- [createworld
	Apocalypse now (Clear all facets) -- [clearall
SELECT SPAWNS BY EXPANSION:
	UO Classic Spawns (pre-T2A) -------- [spawngen uoclassic/UOClassic.map
	UO Mondain's Legacy Spawns --------- [SpawnUOML
	UO KR, SA and HS Spawns ------------ [SpawnCurrent
REMOVE SPAWNS BY EXPANSION:
	UO Classic Spawns (pre-T2A) -------- [spawngen unload 1000
	UO Mondain's Legacy Spawns --------- [UnloadUOML
	UO KR, SA and HS Spawns ------------ [UnloadCurrent
SMART PLAYER RANGE SENSITIVE:
	Generate Spawns' Overseer ---------- [GenSeers
	Remove Spawns' Overseer ------------ [RemSeers
SAVE SPAWNERS:
	All spawns (spawns.map) ------------ [spawngen save
	'By Hand' spawns (byhand.map) ------ [spawngen savebyhand
	Spawns inside region (region.map) -- [spawngen save RegionName
	Spawns inside coordinates ---------- [spawngen save x1 y1 x2 y2
REMOVE SPAWNERS:
	All spawner in ALL facets ---------- [spawngen remove
	All spawners in THIS facet --------- [spawngen cleanfacet
	Remove spawners by SpawnID --------- [spawngen unload SpawnID
	Remove inside Coordinates ---------- [spawngen remove x1 y1 x2 y2
	Remove spawners inside Region ------ [spawngen remove RegionName
EDITOR:
	Spawn Editor ----------------------- [editor
CONVERSION UTILITY:
	RunUO Spawners to Premium ---------- [rse
CUSTOM REGIONS IN A BOX:
	Add a Region Controller ------------ [Add RegionControl

	Como vocês podem ver, ele centraliza num único menu todos os
comandos do sistema, você não precisa saber como se escreve cada comando
para poder usá-los, basta clicar, seguir as instruções e pronto. Os
capítulos seguintes irão descrever como criar um mapa, e como usar a
linha de comando ao invés do Menu "[spawner".



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PARTE II - Criando um Mapa (Básico)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	O Bloco de Notas pode ser usado para criar os mapas. Você verá as
seguintes informações num mapa básico:

## Britain Graveyard:
*|Spectre:Wraith|Skeleton|Zombie||||1369|1475|10|2|5|10|30|20|1|2|3|4|0|0|0

	Este é um mapa que fornece as informações de todos os spawns do
cemitério de Britain. Vamos analisá-lo:

 - A primeira linha começa com um "##", esse duplo "sharp" marca o início
   de um comentário, isto é, o que vier depois dele não será lido pelo
   script. Geralmente é usado para fornecer informações sobre o script:
   de qual dungeon é o mapa, qual revisão está etc.

 - As linhas subsequentes são os spawners em si. Cada linha é um spawner,
   mas a vantagem do PremiumSpawner é que ele comporta até 6 FakeSpawners
   dentro de si, que nada mais são do que spawners com os mesmos
   atributos de distância, tempo etc, mas com lista de criaturas e
   quantidades diferentes:

	*|Spectre:Wraith|Skeleton|Zombie||||1369|1475|10|2|5|10|30|20|1|2|3|
	4|0|0|0

-  Todo spawner começa com um "*", seguido por uma "|". Esta "|" separa
   as informações dentro da linha. Os primeiros 6 espaços são os nomes
   das criaturas, que no caso são:

	Spawner 1: Spectre OU Wraith (o ":" serve para adicionar varias
   criaturas numa lista aleatória)
	Spawner 2: Skeleton
	Spawner 3: Zombie
	Spawner 4: Nenhum (vazio)
	Spawner 5: Nenhum (vazio)
	Spawner 6: Nenhum (vazio)

-  Os três números que vem depois do nome da criatura definem o lugar
   onde irá ser criado o spawner. Seguindo o formato X Y Z (todas as
   informações do spawner são separadas por uma "|"). No caso, o spawner
   vai aparecer nas coordenadas 1369|1475|10, i. e., X = 1369, Y = 1475
   e Z = 10. Se você digitar "[go 1369 1475 10" você irá para o lugar
   onde vai aparecer este spawner.

-  O quarto número diz qual é o mapa onde irá ser colocado este spawner.
   Perceba que o referido número é 2. A definição dos mapas segue este
   padrão:
	0 = spawner vai aparecer em Felucca & Trammel
	1 = spawner vai aparecer somente em Felucca
	2 = spawner vai aparecer somente em Trammel
	3 = spawner vai aparecer somente em Ilshenar
	4 = spawner vai aparecer somente em Malas
	5 = spawner vai aparecer somente em Tokuno

   Logo, deduzimos que o spawner vai aparecer em Trammel, pois o quarto
   número (o do mapa) é o número 2.

-  Os próximos dois números após o do mapa definem respectivamente o
   tempo mínimo e o tempo máximo para o respawn. Isto é, as criaturas
   daquele spawner vão "dar respawn" num intervalo de tempo escolhido
   aleatoriamente entre o tempo mínimo e o máximo. No caso temos "5|10"
   , com uma "|" os dois números (sempre uma "|"). O tempo está em
   minutos, logo os spawners vão dar respawn entre 5 e 10 min após
   terem sido mortos pelos players.

   Mas você poderia escrever o tempo de outra forma, em segundos, minutos
   ou horas:
	|10s| = dez segundos;
	|10m| (ou apenas |10|, o padrão) = dez minutos;
	|10h| = dez horas.

-  Os próximos dois números após os números do tempo, são respectiva-
   mente o WalkingRange e o HomeRange. No caso, 30 de WalkingRange e 20 de
   HomeRange. As criaturas se afastarão portanto a até 30 "quadradinhos"
   (aqueles que a gente vê quando dá um zoom máximo no jogo) de distân-
   cia do spawner. Mas eles "darão respawn" aleatoriamente dentro de
   um raio de até 20 "quadradinhos" de distância do spawner. Perceba
   que o HomeRange é sempre MENOR ou IGUAL ao WalkingRange, NUNCA MAIOR.

-  O próximo número, identifica o spawner, é uma "SpawnID", ela diz
   a que conjunto de spawners aquele spawner em particular pertence.
   Por default, é sempre 1. Ou seja, qualquer spawner criado em jogo
   utilizando-se do "[add premiumspawner..." terá como SpawnID o número 1.
   Isto identifica os spawns criados "by hand", na mão. Mas os mapas,
   podem ter qualquer número para o SpawnID. E é aconselhável que
   todos os spawns de um mesmo mapa, tenham o mesmo SpawnID. Veremos
   o porque disto depois.

-  Os últimos 6 números, também importantes, dizem QUANTOS monstros
   daquele tipo que foi definido no começo do spawner (os 6 primeiros
   espaços), irão ser gerados por aquele spawner. No caso os números são
   "2|3|4|0|0|0", logo serão criados 2 spectres ou wraiths, 3 skeletons
   e 4 zombies. Já os últimos números são 0, ou seja, nada será gerado
   nos 3 últimos spawners, mesmo que você definisse algum valor, nada
   seria gerado, pois nenhuma criatura foi listada neles.

	Como observação, perceba que a maioria das propriedades de um
spawner, descritas acima, podem ser definidas sem a necessidade de "ver"
onde o spawner irá aparecer, mas as coordenadas será necessário "ver".
Isto porque se você escolher coordenadas aleatoriamente, corre o risco de
criar um spawner num lugar inacessível, como por exemplo, no meio do
oceano!!! De forma que é necessário ir até o lugar onde você gostaria que
o spawner aparecesse e usar o comando "[get location" no lugar. E então
anotar as coordenadas que vão aparecer na tela. Outro comando é "[where",
que diz o lugar onde você está, neste caso fique sobre o lugar onde você
deseja que o spawner apareça.
	Feito o mapa, é só salvá-lo no diretório Data/Monsters (se não
houver uma pasta Monsters dentro de Data, é hora de criar uma. Clique em
"Salvar Como", selecione em Salvar como Tipo, "Todos os Arquivos" e então
digite um nome para o mapa, não esquecendo de colocar o ".map" no fim do
nome. No exemplo acima, se tivéssemos feito aquele mapa, poderíamos
dar-lhe o nome de "graveyard.map".

RESUMINDO
	O formato padrão de um spawner é:

*|Lista1|Lista2|Lista3|Lista4|Lista5|Lista6|X|Y|Z|mapa|TempoMín|TempoMáx|
WalkingRange|HomeRange|SpawnID|Count1|Count2|Count3|Count4|Count5|Count6



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PARTE III - Usando os Mapas "In-Game"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	Esta parte é simples, são apenas a lista de comandos que se deve
utilizar dentro do jogo para que o script gere os spawners a partir dos
mapas criados. Partindo do pressuposto que você já instalou os scripts
necessários no diretório do RunUO, você pode usar os seguintes comandos:

 - [spawngen nomedomapa.map
	Este lê o mapa e gera os spawns. No nosso exemplo poderia ser algo
      como "[spawngen graveyard.map".

 - [spawngen remove
	Este comando é perigoso, porque APAGA TODOS os spawners de todos
      os mundos do UO! Indiferente de você tê-los feito a mão ou usando a
      técnica dos mapas.

 - [spawngen save
	Comando útil, ele SALVA num arquivo chamado "Spawns.map" TODOS os
      spawners que existirem em seu mundo! É útil para não ter que usar
      20 vezes o comando de criação de spawners pra CADA mapa que você
      fez, se tiver que povoar o seu mundo de novo... com a vantagem de
      salvar tanto os spawners feitos a mão quanto os feitos pela
      técnica dos mapas.

 - [spawnrem
	Remove todos os spawners do mapa atual (o mapa no qual foi
      executado o comando).



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PARTE IV - Criando um Mapa (Avançado)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	Você já aprendeu a criar mapas usando o método de classe, i. e,
você digita o nome da criatura e depois as estatísticas. Mas e se você
quiser mais de um tipo de criatura no mesmo spawner?

	Use o método dos pontos. Neste caso, bastaria separar as criaturas
que você gostaria que aparecessem naquele spawner por ":", como no
exemplo abaixo:

*|Spectre:Wraith||||||1369|1475|10|2|5|10|30|20|1|10|0|0|0|0|0

	Como resultado final você terá o spawner selecionando aleatoriamente
dentro da quantidade indicada, entre as criaturas na lista, separadas por
ponto. Lembrando que você pode colocar quantas criaturas quiser, todas
separadas pelo ":". No exemplo, poderíamos ter 7 Spectre e 3 Wraith, ou
5 de cada, este número vai variar.


Sobrescrevendo Mapas
--------------------

	Já pensou em fazer um mapa que sirva tanto para Trammel quanto
para Felucca? Pois é, ao invés de usar apagar o número do mapa de cada
linha de spawner de seu mapa para fazer com que ele funcione em outro
mundo, simplesmente, sobrescreva o número do mapa com uma única linha,
como você fez com as IDs acima. Assim poderíamos usar o mapa do exemplo
acima, que gera spawns em Trammel apenas, para gerar spawns tanto em
Trammel quanto em Felucca, adicionando "overridemap":

overridemap 0
overrideid 14
## Britain Graveyard:
*|Spectre:Wraith|Skeleton|Zombie||||1369|1475|10|2|5|10|30|20|1|2|3|4|0|0|0

	Aqui ele faz com que o "2" do mapa, seja lido como "0" pelo gerador
de spawners. Os números dos mapas são os mesmos usados e descritos em
"PARTE II - Criando um Mapa (Básico)".


Sobrescrevendo SpawnID
----------------------

	O mesmo que para OverrideMap, mas para SpawnID. SpawnID "1" será
lido como "14", como abaixo:

overrideid 14
overridemap 0
## Britain Graveyard:
*|Spectre:Wraith|Skeleton|Zombie||||1369|1475|10|2|5|10|30|20|1|2|3|4|0|0|0


Sobrescrevendo DelayTime
------------------------

	Não gostou do tempo mínimo e máximo para o respawn dos NPCs que
vem como padrão na distro? Quer mudar? Aumentar ou diminuir o tempo?
Faça exatamente como para OverrideID ou OverrideMap, mas ao invés,
utilize:

	overridemintime

	e/ou

	overridemaxtime

Exemplo:

overridemintime 10
overridemaxtime 20
overridemap 0
overrideid 14
## Britain Graveyard:
*|Spectre:Wraith|Skeleton|Zombie||||1369|1475|10|2|5|10|30|20|1|2|3|4|0|0|0

	Aqui ele faz com que o "2" do mapa, seja lido como "0", o "1" da ID
seja lido como "14", e o "5" e "10" do delay sejam lidos como "10" e "20"
respectivamente pelo gerador de spawners. Os números dos mapas são os
mesmos usados e descritos em "PARTE II - Criando um Mapa (Básico)".


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PARTE V - Usando os Mapas "In-Game" (Avançado)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


Povoamento In-Game
------------------

	Outra forma de povoar o mundo é ir "in-game" e adicionar os
spawners manualmente, com o comando [add premiumspawner <nomedacriatura>.
E depois setar os atributos (x = número):

[set count x homerange x spawnrange x maxdelay x mindelay x


Comandos para Salvar e Remover Spawns
-------------------------------------

	Depois que terminar de povoar a área desejada, use o comando
[spawngen save, mas espere, vou ensinar-lhe algumas opções avançadas
deste comando.

[spawngen savebyhand
	Use este comando para salvar todos os spawns que você fez "na mão"
      (SpawnID = 1) para um arquivo de nome "byhand.map".

[spawngen save x1 y1 x2 y2
	Com isto você salva para o arquivo spawns.map todos os spawners que
      estiverem dentro do retângulo definido pelos valores x1 y1 x2 y2.
      Mais uma vez, x e y aqui são coordenadas, como no exemplo:

 (x1,y1)------+      	Todos os spawners entre o primeiro grupo
   |          |      de coordenadas (x1,y1) e o segundo grupo (x2,y2)
   |          |      formam um retângulo, e tudo que estiver nesta
   |          |      área definida será salvo para o arquivo. A
   |          |      coordenada Z neste caso, não é necessária.
   +---------(x2,y2)

[spawngen save <region>
	Este é bom também, salva arquivos numa região definida pelo RunUO.
	A lista completa das regiões varia de mapa para mapa, e você pode
	achá-la no arquivo que está em c:/RunUO/Data/, chamado Regions.xml.
	Por exemplo, podemos ver em Regions.xml o seguinte trecho:

<region priority="50" name="Minoc">
	<rect x="2411" y="366" width="135" height="241" />
	<rect x="2548" y="495" width="72" height="55" />
	<rect x="2564" y="585" width="3" height="42" />
	<rect x="2567" y="585" width="61" height="61" />
	<rect x="2499" y="627" width="68" height="63" />
	<inn x="2457" y="397" width="40" height="8" />
	<inn x="2465" y="405" width="8" height="8" />
	<inn x="2481" y="405" width="8" height="8" />
	<go location="(2466,544,0)" />
	<music name="Minoc" />
</region>

	Isto define os limite da cidade de Minoc, e cria um monte de
retângulos, logo, tudo que estiver dentro destes retângulos será salvo
para "o spawns.map". Ás vezes é útil. Como observação, o "[spawngen
remove", pode ser usado com as mesmas opções do "[spawngen save" descritas
acima, com a diferença que os spawners dentro do retângulo serão apagados.
Outra opção é digitar [where, e a região onde você se encontra vai
aparecer na tela do jogo, é só copiar o nome.
	Para encerrar, ao salvar spawners que ficam salvos no spawns.map,
vá até Data/Monsters e renomeie o arquivo para o nome que você quiser,
pois se você der outro "[spawngen save", você corre o risco de perder
seus spawners. Por exemplo, poderíamos renomear o spawns.map gerado pelo
"[spawngen save minoc" para Minoc.map.


Removendo mapas - o método Unload (recomendado)
-----------------------------------------------

	Outra possibilidade é remover um determinado mapa, sem ter que
apagar os demais (através do [spawngen remove), e este método que irei
falar agora, é o melhor método para remover mapas que não se deseja. Em
jogo use:

[spawngen unload SpawnID

	Por isso que cada mapa deve ter a mesma ID para todos os seus
spawners, pois se você der uma ID diferente para cada spawner do mapa,
você não conseguirá remover todo ele. Vamos ver o caso do Graveyards.map
discutido acima. Todos os spawns dele tem como SpawnID o valor 1 (se
lembre de dar valores diferentes para cada mapa). Vejamos:

## Britain Graveyard:
*|Spectre:Wraith|Skeleton|Zombie||||1369|1475|10|2|5|10|30|20|1|2|3|4|0|0|0

	Mas aí tem um problema, pois 1 é o número default para mapas
feitos "na mão", em jogo. Então temos que dar uma ID diferente para este
mapa. No exemplo acima bastaria alterar cada uma das linhas. Mas e se o
mapa tivesse 100 ou talvez 1000 spawners? Seria trabalho demais não? Por
isso existe o "overrideid", que é um recurso que configura todas as IDs
do mapa para a mesma ID, com a simples adição de uma linha ao topo do
arquivo. Bom, para exemplificar eu irei configurar a ID deste mapa para
"14", que é um bom número.

overrideid 14
## Britain Graveyard:
*|Spectre:Wraith|Skeleton|Zombie||||1369|1475|10|2|5|10|30|20|1|2|3|4|0|0|0

	Sútil diferença não? Apesar de cada spawner ainda ter o valor 1 como
ID em cada linha, o "overrideid 14" fará com que o gerador de spawners
leia aquele "1" como se fosse "14". Depois em jogo, se eu quiser remover
este mapa é só digitar "[spawngen unload 14", e pronto. Nenhum dos seus
outros spawns será alterado ou removido.



>>>>>>>>>>>>>>>>>>>>>>>>>>>
PARTE VI - Opções de Edição
<<<<<<<<<<<<<<<<<<<<<<<<<<<

[editor
	Isto vai abrir o editor de spawns. Será listado todos os spawners
	do mapa em que você estiver, na coluna da esquerda. Na coluna da
	direita você pode selecionar para exibição obedecendo certos
	critérios, tais como: apenas os spawns dentro certa distância de
	onde você estiver, ou apenas spawns com determinada ID, ou apenas
	aqueles que tiverem certa criatura. Uma vez selecionado o spawner
	a editar, você pode: dar um [props, alterar qualquer atributo dele,
	criaturas etc.

[clearall
	Quer apagar tudo e começar do zero? Isto funciona como o
	[Clearfacet, só que apaga todos os mapas, e não apenas aquele no
	qual você estiver. Seja cauteloso ao usá-lo.

[GMbody
	Esta distro configurou certas características comuns aos GMs, e
	criou um comando que quando usado em si mesmo, configura o
	personagem com uma série de itens, incluindo Robe, spellbooks, cor
	de cabelo, títulos diferentes para cada nível da hierarquia
	([Owner], [Developer], [Admin], [Seer], [GM] e [Counselor]). Além
	de setar o seu corpo para o corpo humano, caso você tenha se
	modificado para uma quest.

>>>>>>>>>>>>>>>>>>>>>>>>>>>
PART VII - SPAWNS' OVERSEER
<<<<<<<<<<<<<<<<<<<<<<<<<<<

A Revisão 22 adicionou o "Spawners' Overseer": a nova encarnação do
"Smart Player Range Sensitive", que permitia reduzir o lag, o uso da CPU,
o tempo de save do jogo, e o tamanho dos arquivos salvos.

Como funciona:
Ele tem um "range" (alcance), que pode ser editado por um GM ou superior.
Ele procura por players dentro deste range a cada vez que o timer zera.
Se houver um jogador neste raio de alcance (ou um membro da Staff que não
esteja oculto) ele verificará por players novamente apenas depois 30 min
(este tempo pode ser alterado). Se não houver jogadores ao alcance (ou se
os membros da staff estiverem ao alcance, mas ocultos) ele desabilitará
todos os PremiumSpawners na área, apagando mobiles e itens, e voltará a
checar por players a cada 5 segundos.

[GenSeers - gera Overseers lendo arquivos de configuração em
            Data\Monsters\Overseers.

Não há arquivos de configuração para Overseers ainda. Então nada é gerado
com esse comando ainda. A engine está feita e está funcionando, mas ainda
precisa de arquivos de configuração para dizer à engine onde colocar os
overseers.

[RemSeers - remove todos os Overseers.


>>>>>> ADICIONADO >>>>>>
	
Se não há arquivos de configuração, você terá que adicionar OverSeers
você mesmo, na mão:

[add SpawnsOverseer
- adicionará um OverSeer com range 20 (área de 40 x 40 quadrados).

[add SpawnsOverseer 50
- adicionará um OverSeer com range 50 (área de 100 x 100 quadrados).


>>>>>> ARQUIVOS DE CONFIGURAÇÃO >>>>>>

Olhe em:

 ...\Data\Nerun's Distro\Spawns\overseers\trammel\Overseers.cfg

É um arquivo de exemplo:

 SpawnsOverseer 7966
 5433 1102 0

É simples: abaixo de "SpawnsOverseer 7966" entre as coordenadas (x,y,z)
onde você quer que seja colcoado um overseer.


>>>>>> RANGES >>>>>>

Você pode colocar ranges diferentes:

 SpawnsOverseer 7966 (Range=50)
 5433 1102 0

Lembre-se que se não especificado o range padrão é 20.

Range é o alcance da visão do seer (o feitor, o vigia). PremiumSpawners
dentro deste alcance serão vigiados pelo feitor. você pode colocar o
range que quiser, não há limite.

Você pode colocar muitos seers com alcances diferentes:

 SpawnsOverseer 7966
 5433 1102 0
 1234 970 0
 3456 456 0

 SpawnsOverseer 7966 (Range=50)
 5433 1102 0

Você pode mudar outros parâmetros usando:

 SpawnsOverseer 7966 (InRangeDelay=30; OutRangeDelay=5)
 5433 1102 0

E pode combinar todos eles juntos:

 SpawnsOverseer 7966 (Range=50; InRangeDelay=30; OutRangeDelay=5)
 5433 1102 0

InRangeDelay = tempo em minutos para a próxima verificação se houver players
               dentro do raio de alcance.

OutRangeDelay = tempo em segundos para a próxima verificação se NÃO
                houver players dentro do raio de alcance.


>>>>>> ITEMID >>>>>>

Sempre use "SpawnsOverseer 7966", o número é o ItemID dos
SpawnsOverseers, obrigatório.


>>>>>> COMMENTÁRIOS >>>>>>

Use # para adicionar comentários ao arquivo, que não serão lidos pelo
comando [GenSeers:

 # Esta linha é um comentário.
 # Use para organizar seus arquivos e anotar
 # lembretes para si mesmo
 SpawnsOverseer 7966 (Range=50)
 5433 1102 0


>>>>>> PASTAS >>>>>>

Coloque os arquivos de coniguração na pasta certa.

Trammel:
...\Data\Nerun's Distro\Spawns\overseers\trammel\Overseers.cfg

Felucca:
...\Data\Nerun's Distro\Spawns\overseers\felucca\Overseers.cfg

Etc.


>>>>>> NOMES DOS ARQUIVOS DE .CFG >>>>>>

Você pode colocar mais de um arquivo cfg na mesma pasta, não precisam
ter o nome "Overseers.cfg", eles podem ter qualquer nome, desde que
termine em .cfg.

Você pode optar por um arquivo "Graveyards.cfg" para todos os
cemitérios de um dado mapa, e outro "Florests.cfg" para as florestas
e áreas abertas etc.
